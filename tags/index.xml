<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tags on Chris Prijic</title><link>https://chrisprijic.com/tags/</link><description>Recent content in Tags on Chris Prijic</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://chrisprijic.com/tags/index.xml" rel="self" type="application/rss+xml"/><item><title>Error Handling in Go</title><link>https://chrisprijic.com/error-handling-in-go/</link><pubDate>Sun, 22 May 2022 02:14:54 -0700</pubDate><guid>https://chrisprijic.com/error-handling-in-go/</guid><description>&lt;p>I&amp;rsquo;ve been using Go for five years now in both professional and personal
projects. This will be the first post of many where I look back at that
experience and analyze a particular part of the language, as well as share some
common patterns and lessons I&amp;rsquo;ve learned along the way.&lt;/p>
&lt;hr>
&lt;p>In Go, errors are &lt;em>values&lt;/em>. This means they can be returned, operated on, and
passed around like any other value. Errors as values provides some great
benefits:&lt;/p>
&lt;ul>
&lt;li>explicit control flow throughout your application&lt;/li>
&lt;li>the ability to enrich errors with additional, human-readable information&lt;/li>
&lt;li>there&amp;rsquo;s no question if a method can error out or not&lt;/li>
&lt;/ul>
&lt;p>They are a core language type that only have one requirement. TO be an error,
you must satisfy the following interface:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="kt">error&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">Error&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="kt">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You have a couple of ways to easily create errors:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">err&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">errors&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">New&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;this is a string --&amp;gt; error&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">err&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Errorf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;this does string formatting into an error: %v&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>There&amp;rsquo;s also error wrapping, introduced in Go 1.13&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>. This lets you add
additional context while also letting callers detect lower-level error types
easily and effectively.&lt;/p>
&lt;h2 id="how-i-handle-errors-in-go">How I handle errors in Go&lt;/h2>
&lt;p>Let&amp;rsquo;s check out a practical (though simplified) example of copying a file
(lifted and modified from Russ Cox&amp;rsquo;s Go 2 proposal&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">CopyFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">src&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">dst&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">error&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">r&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">src&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Errorf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;error opening src file %s: %w&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">src&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">defer&lt;/span> &lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Close&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">w&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">dst&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Errorf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;error creating dst file %s: %w&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">dst&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">io&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Copy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">w&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">r&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">w&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Close&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Remove&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">dst&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Errorf&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;error copying file contents from %s to %s: %w&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">src&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">dst&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">w&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Close&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Remove&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">dst&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Errorf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;error closing dst file %s: %w&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">dst&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here I modified the original code example with two changes:&lt;/p>
&lt;ul>
&lt;li>wrapping errors in &lt;code>fmt.Errorf&lt;/code> using &lt;code>%w&lt;/code>&lt;/li>
&lt;li>modifying the error messages to include context about &lt;em>what&lt;/em> failed to happen&lt;/li>
&lt;/ul>
&lt;p>If you&amp;rsquo;re hacking or scripting, you can just log the error, but still get any
context you might want from the printed error:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">CopyFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">src&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">dst&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Fatalf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Error: %v&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here&amp;rsquo;s what a possible error prints out:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">error opening src file file.txt: open file.txt: no such file or directory
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Not only does it log that it failed to find such a file or directory, but also
that it is the &lt;em>source&lt;/em> file that couldn&amp;rsquo;t be opened. What if you don&amp;rsquo;t know if
the file was the source or destination file? The additional context added to the
error message clears that up for you.&lt;/p>
&lt;p>Alternatively, in automated or production use-cases, you can handle specific
error types automatically with a little extra code:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">CopyFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;source.txt&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;dest.txt&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">switch&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="nx">errors&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Is&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ErrNotExist&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// handle missing file error directly
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// ... other cases
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="re-all-the-discourse-around-errors">Re: All the discourse around errors&lt;/h2>
&lt;p>Go error handling is a somewhat devisive part of the language. You can easily
discover a variety of material online already that speak to the stark contrast
of those that like and dislike this feature of the language&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>Many developers have issues with Go&amp;rsquo;s error handling patterns. Common complaints
include the following (non-exhaustive) list:&lt;/p>
&lt;ul>
&lt;li>&lt;em>writing too much code for error handling&lt;/em>: To this, I say that we all spend
more time reading and understanding code, not writing it.&lt;/li>
&lt;li>&lt;em>you keep copy/pasting the pattern &lt;code>if err != nil {return err}&lt;/code>&lt;/em> everywhere:
To this, I find explicit code flow to be easier to reason about and understand
than it automatically returning these errors instead.&lt;/li>
&lt;/ul>
&lt;p>Let&amp;rsquo;s take a quick look at that second point in a little more detail.&lt;/p>
&lt;h2 id="bubbling-errors">Bubbling errors&lt;/h2>
&lt;p>I find it paramount for users of Go to understand the importance of the
statement &lt;code>if err != nil {return err}&lt;/code>. Here&amp;rsquo;s why its so important.&lt;/p>
&lt;p>First off, it tells you that whatever error is happening, the current code flow
is not willing or able to handle it. A great example is a circuit breaker
returning a &lt;code>4XX&lt;/code> error.&lt;/p>
&lt;p>In this example, a circuit breaker should not get in your way except to handle
the case that opens the circuit. If any other error should occur, it should
transparently return the original error without modification. It has no reason
nor purpose to modify a user-caused error.&lt;/p>
&lt;p>If you want to add additional context to the error, you can use wrapping.You are
still sharing details about the original error by &lt;em>wrapping&lt;/em> the error. Both
the returned erro ras well as the original error are available to the caller and
can be handled in whatever way is deemed fit for the situation.&lt;/p>
&lt;h2 id="final-words">Final Words&lt;/h2>
&lt;p>Error handling is a very challenging problem to tackle. Proper error handling
and reporting requires a lot of code and isn&amp;rsquo;t easily solved using other error
handling techniques, like exception throwing and handling.&lt;/p>
&lt;p>It might seem daunting to have a bunch of error checking and mapping throughout
your code; however, in practice I&amp;rsquo;ve seen the opposite effect. What little
amount of additional code you have to write, you make up in the clarity of your
code&amp;rsquo;s flow control, while also reducing your cognitive load on keeping track of
what the code is doing.&lt;/p>
&lt;p>Let&amp;rsquo;s look at Rust, which supports &lt;code>Result&amp;lt;T, E&amp;gt;&lt;/code>, the &lt;code>?&lt;/code> operator, and so on.
Though this still denotes areas of your code that return errors, it still adds
additional cognitive load to understand and model these concepts in your head,
rather than letting the code explicitly and plainly tell you what it is doing.&lt;/p>
&lt;p>Go2&amp;rsquo;s design proposal&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup> for error handling is interesting, but I still digress
that it focuses on reducing the effort tied to writing code, rather than the
overall cost of reading, understanding, and maintaining code. Go&amp;rsquo;s error
handling helps you improve the base quality of the code, at the expense of a
little extra written code to accomplish that, and that&amp;rsquo;s ok.&lt;/p>
&lt;hr>
&lt;h2 id="tldr">TL;DR:&lt;/h2>
&lt;p>Overall, I apply the following guidelines for error handling in Go:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>always&lt;/strong> handle errors. Never use &lt;code>_&lt;/code>. Use &lt;code>panic&lt;/code> if it isn&amp;rsquo;t production or
mission critical.&lt;/li>
&lt;li>expand if possible on what failed due to the error. Use &lt;code>fmt.Errorf&lt;/code> with &lt;code>%w&lt;/code>&lt;/li>
&lt;li>use 1.13 features of &lt;code>Is&lt;/code>, &lt;code>As&lt;/code>, and &lt;code>Unwrap&lt;/code> to support more robust error
handling use-cases&lt;/li>
&lt;li>focus more on the ability for your code to tell others what it does plainly,
without ambiguity. Writing a couple more lines, or copying a couple of lines
won&amp;rsquo;t drastically derail a timeline to complete a project&lt;/li>
&lt;/ul>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>&lt;a href="https://go.dev/doc/go1.13#error_wrapping">Go 1.13 Release Notes (Error Wrapping)&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>&lt;a href="https://www.youtube.com/watch?v=6wIP3rO6On8&amp;amp;t=131s">Go 2 Drafts Announcement&lt;/a>&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3">
&lt;p>&lt;a href="https://www.boramalper.org/blog/go-s-error-handling-sucks-a-quantitative-analysis/">Go&amp;rsquo;s Error Handling Sucks&lt;/a>,
&lt;a href="https://rauljordan.com/2020/07/06/why-go-error-handling-is-awesome.html">Why Go&amp;rsquo;s Error Handling is Awesome&lt;/a>,
&lt;a href="https://debugged.it/blog/go-is-terrible/">Go is a terrible language&lt;/a>&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4">
&lt;p>&lt;a href="https://go.googlesource.com/proposal/+/master/design/go2draft-error-handling-overview.md">Error Handling (Go2 Draft)&lt;/a>&amp;#160;&lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Boring Code is a Virtue</title><link>https://chrisprijic.com/boring-code-is-a-virtue/</link><pubDate>Tue, 19 Apr 2022 05:00:00 -0700</pubDate><guid>https://chrisprijic.com/boring-code-is-a-virtue/</guid><description>&lt;p>This past month, I&amp;rsquo;ve had the chance to dive back in to pair-programming and
code reviews at a higher frequency than usual. This has given me the chance to
reflect on my software development process and how it&amp;rsquo;s changed over time. This
post covers some of the insights discovered during that reflection, and why much
of the software I write today leans towards &amp;ldquo;boring&amp;rdquo;.&lt;/p>
&lt;h2 id="granularity">Granularity&lt;/h2>
&lt;p>I don&amp;rsquo;t think I can word this much better than Casey Muratori did in his own
article on granularity and complexity&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>:&lt;/p>
&lt;blockquote>
&lt;p>&amp;ldquo;This is so easy to use, and yet it never gets in my way when I need to do
something tricky!&amp;rdquo;&lt;/p>
&lt;/blockquote>
&lt;p>Ever since I read this post back in college, I&amp;rsquo;ve found myself trying to provide
granular layers to software I build. This means that as we add new features,
we can (and often do) support the feature at a few different levels of
granularity where it fits in well; other times we support the feature directly
in its specific areas when it doesn&amp;rsquo;t generalize to other levels of convenience.&lt;/p>
&lt;p>Imagine an ORM that doesn&amp;rsquo;t let you also run raw SQL directly when you need to,
or a car that doesn&amp;rsquo;t let you control the speed of your vehicle except through
your cruise-control interface. These systems grant additional layers of control
that interface with each other in ways that let those &amp;ldquo;convenient&amp;rdquo; solutions get
out of your way when you need to do something more specific or complex.&lt;/p>
&lt;p>&lt;em>TL;DR: support multiple layers of granularity in your software, so that you can
help developers at multiple levels over an opt-in/out status.&lt;/em>&lt;/p>
&lt;h2 id="libraries-and-abstractions">Libraries and Abstractions&lt;/h2>
&lt;p>In the same way, libraries and abstractions are an interesting topic. SOLID and
DRY are very often prevalent in software development circles, but they also have
downsides.&lt;/p>
&lt;p>As you try to write software to support a variety of use-cases, there&amp;rsquo;s a good
chance that not &lt;em>every&lt;/em> use case or feature should be supported. I&amp;rsquo;ve leaned
towards two specific rules in the past few years I try to adhere to:&lt;/p>
&lt;ul>
&lt;li>Libraries, not Frameworks&lt;/li>
&lt;li>The smaller and more specific a library is, the better&lt;/li>
&lt;/ul>
&lt;p>Let&amp;rsquo;s break those down.&lt;/p>
&lt;h3 id="libraries-not-frameworks">Libraries, not Frameworks&lt;/h3>
&lt;p>This one is pretty easy for me. Frameworks typically force you to adhere to
conventions over configuration. The unfortunate side-effect of this is that they
then typically &lt;em>get in your way&lt;/em> when you need to do something different than
how they&amp;rsquo;d like you to accomplish that. Learning how to efficiently tune a rails
API is not exactly the greatest experience I&amp;rsquo;ve had. It&amp;rsquo;s gotten much easier
over the years, but frameworks still force you to bend to &lt;em>their&lt;/em> will.&lt;/p>
&lt;p>Libraries, on the other hand, are entirely optional. Don&amp;rsquo;t want to use it? Then
don&amp;rsquo;t! Want to use just a part of it and not the whole thing? Go right ahead!
Many times, I&amp;rsquo;ve found myself supporting my team with features in libraries, so
they can feel free to build their products and services how they choose.&lt;/p>
&lt;p>&lt;em>Disclaimer: This doesn&amp;rsquo;t mean it&amp;rsquo;s the Wild West on the team! It just means
that people aren&amp;rsquo;t forced to adhere to a specific, restrictive way of developing
software. Each team and service has their own set of criteria and can build as
fits best for their goals.&lt;/em>&lt;/p>
&lt;h3 id="the-smaller-and-more-specific-the-better">The smaller and more specific, the better&lt;/h3>
&lt;p>We have a UUID library we use internally. Outside of it largely being a wrapper
of an open-source library, it only contains a couple extra helper functions
we&amp;rsquo;ve seen written in &lt;em>every service we have&lt;/em>.&lt;/p>
&lt;p>For example, the following:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">PUuid2PStr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">input&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">uuid&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">UUID&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">input&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">s&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">String&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">s&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Since we translate UUIDs to Strings and vice-versa at different layers of our
services&amp;rsquo; stacks, adding these functions helped considerably. These are also
technical concerns and not business ones&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>, so sharing them across services is
likely fine. If a service has other rules in mind, they can easily just not use
this function and make one of their own.&lt;/p>
&lt;p>Since its a good goal to keep the dependencies low on the software you
write&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>, I also find it important that the dependencies are small and specific
to make the process of keeping them up-to-date as simple as possible as well.&lt;/p>
&lt;p>&lt;em>TL;DR: small composable libraries reduce the drawbacks of using those
dependencies in other software.&lt;/em>&lt;/p>
&lt;h1 id="comments-and-reviews">Comments and Reviews&lt;/h1>
&lt;p>The more code reviews I do, and the more software I maintain, I&amp;rsquo;ve found myself
leaning on adding any comments I make in a PR or review to the code itself.&lt;/p>
&lt;p>Comments are a may to more easily come back to code that can speak to what the
code doesn&amp;rsquo;t already tell you. For example, I needed to install docker-compose
inside an already dockerized environment. I could have done this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># install dependencies&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">apk add --no-cache bash curl git python3-dev py-pip libffi-dev openssl-dev &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> gcc libc-dev rust cargo make openssh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>However, coming back to this CI pipeline script later, I might wonder why we
need all of these libraries installed in the first place. Removing/changing them
only to realize they&amp;rsquo;re all needed. But &lt;em>&lt;em>why&lt;/em>&lt;/em>?&lt;/p>
&lt;p>What I did instead, is cover what the code doesn&amp;rsquo;t already tell you:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Re: https://docs.docker.com/compose/install/&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># under &amp;#34;Alternative install options&amp;#34; there is an &amp;#34;Install as a container&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># section that did not work on Bitbucket Pipelines.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># They do list the alpine packages we need, however; so I set that up here.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># added git and openssh for use by Golang&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">apk add --no-cache bash curl git python3-dev py-pip libffi-dev openssl-dev &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> gcc libc-dev rust cargo make openssh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This points them to:&lt;/p>
&lt;ul>
&lt;li>Where I discovered what I need to install&lt;/li>
&lt;li>What &lt;em>didn&amp;rsquo;t&lt;/em> work if they tried this from scratch themselves&lt;/li>
&lt;li>What additional packages I&amp;rsquo;ve added to support other use-cases&lt;/li>
&lt;li>Any additional comments I have on the process of getting here&lt;/li>
&lt;/ul>
&lt;p>This is all in hopes that this makes the life easier for any developer that
needs to read/modify/remove this script for any reason.&lt;/p>
&lt;p>Most of the time, software development is iterative. If you did iterate and know
what has worked and what has not, documenting that in the code could help future
developers (most likely yourself too!) from questioning or re-creating those
same mistakes. Leaving these in the code (rather than a PR or separate document)
makes it easier to find when working on that same code.&lt;/p>
&lt;p>&lt;em>TL;DR: focus on the &lt;em>why&lt;/em> over the &lt;em>what&lt;/em> and &lt;em>how&lt;/em>.&lt;/em>&lt;/p>
&lt;h1 id="performance">Performance&lt;/h1>
&lt;p>Lastly I wanted to touch on performance briefly. Performance &lt;em>can&lt;/em> contradict
everything else in this post; however, I do want to mention that these ideas can
instead be used to &lt;em>support&lt;/em> performance constraints instead.&lt;/p>
&lt;p>&lt;em>Use comments to explain what performance-constrained code does&lt;/em>. This is one
area where explaining what is happening with a comment can be useful, because
the code is no longer written for readability.&lt;/p>
&lt;p>&lt;em>Granularity can be used so your performance-centric code is out-of-the-way of
the more convenient areas of code.&lt;/em> If libraries and other parts of your
software can get out of your way when you need to dive down into performance,
then you can easily do so.&lt;/p>
&lt;p>&lt;em>Don&amp;rsquo;t move performance-specific code into an abstraction or library&lt;/em>. More
often than not, performance tweaks will diverge based off of different
scenarios, and likely without much forbearing ahead of time.&lt;/p>
&lt;p>&lt;em>TL;DR: You can still program for performance and adhere to these guidelines;
they are guidelines after-all, and not rules.&lt;/em>&lt;/p>
&lt;h2 id="boring-code-is-a-virtue">Boring Code is a Virtue&lt;/h2>
&lt;p>So there it is! The most recent project I&amp;rsquo;ve worked on, I&amp;rsquo;ve been applying these
principles. I&amp;rsquo;ve noticed that the code comes out boring! Why is that?&lt;/p>
&lt;p>Well, the fun is in the process. When things &lt;em>just work&lt;/em>, and the process is
&lt;em>just smooth&lt;/em>, and the details are &lt;em>documented and figured out&lt;/em>, then the
software is more straightforward and easier to understand. The complexity and
intrigue lies in the design and architecture, the technology, and the solutions.&lt;/p>
&lt;p>We&amp;rsquo;ve isolated terrible APIs from our business logic. We&amp;rsquo;ve broken down a
complex business requirement into a well-documented process that a fresh hire
was able to modify and enhance in his first week. Most of our code boils
down to checks (if/switch) and loops (for/while) to accomplish a vast majority
of its tasks.&lt;/p>
&lt;p>You don&amp;rsquo;t &lt;em>have&lt;/em> to use that &amp;ldquo;Next Framework&amp;rdquo;. I highly suggest trying these out
in your next project.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>&lt;a href="https://caseymuratori.com/blog_0016">Complexity and Granularity&lt;/a>,
Part 2 in a series of articles on Casey Muratori&amp;rsquo;s approach to software
development.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>&lt;a href="https://phauer.com/2016/dont-share-libraries-among-microservices/">Don&amp;rsquo;t Share Libraries among Microservices&lt;/a>&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3">
&lt;p>Check out &lt;a href="https://snyk.io/blog/peacenotwar-malicious-npm-node-ipc-package-vulnerability/">this&lt;/a>
and &lt;a href="https://snyk.io/blog/open-source-npm-packages-colors-faker/">this&lt;/a>;
both vulnerabilities occured &lt;em>just this year&lt;/em> in very common packages on
NPM.&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>My Guidelines on Product Development</title><link>https://chrisprijic.com/my-guidelines-on-product-development/</link><pubDate>Mon, 28 Mar 2022 10:00:00 -0700</pubDate><guid>https://chrisprijic.com/my-guidelines-on-product-development/</guid><description>&lt;p>&lt;em>This is by no means a novel approach; however, I wanted to share my 2¢ and
reflect the process.&lt;/em>&lt;/p>
&lt;p>&lt;img src="https://chrisprijic.com/img/product_development_swing.jpg" alt="The different interpretations when a customer requests a feature">&lt;/p>
&lt;p style="text-align: center;font-size: 1.3rem;">&lt;i>
Copyright © &lt;a href="www.projectcartoon.com">www.projectcartoon.com&lt;/a>
using the Creative Commons Attribution 3.0 Unported License
&lt;/i>&lt;/p>
&lt;p>Variations of this image have circulated since the 1960&amp;rsquo;s&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> around the &amp;ldquo;Tree
Swing Picture&amp;rdquo;. When developing software, a common misconception can be thinking
that what &lt;em>you&lt;/em> know mixed with what requirements are given to you are known by
everyone.&lt;/p>
&lt;p>A popular parallel to this process is the game of telephone, where by the end of
the chain of people, you can likely get a completely different result from the
first person. Software product development can feel much like that.&lt;/p>
&lt;p>One thing that can easily make this process smoother is by actively listening
and asking questions. The more information you have at your disposal, the better
you can develop a solution to the problem.&lt;/p>
&lt;h2 id="what-to-listen-for">What to listen for&lt;/h2>
&lt;p>When listening to the details of what is being requested, its important to
listen for trigger phrases. These are phrases that should cause you to actively
listen to each word they say right before or after that phrase. Some examples of
this are:&lt;/p>
&lt;ul>
&lt;li>&lt;em>&amp;ldquo;Something that keeps me from &amp;hellip;&amp;rdquo;&lt;/em>&lt;/li>
&lt;li>&lt;em>&amp;ldquo;All I really need is &amp;hellip;&amp;rdquo;&lt;/em>&lt;/li>
&lt;li>&lt;em>&amp;ldquo;Once we can &amp;hellip;.&amp;rdquo;&lt;/em>&lt;/li>
&lt;/ul>
&lt;p>These phrases help you identify &lt;em>&lt;strong>pain points&lt;/strong>&lt;/em> in the current product.&lt;/p>
&lt;h2 id="what-to-do-with-that-information">What to do with that information&lt;/h2>
&lt;p>Don&amp;rsquo;t just run away with those pain points just yet! You have heard them &lt;em>in
their first pass&lt;/em>.&lt;/p>
&lt;p>This means you have heard it once, and have internalized &lt;u>your&lt;/u>
interpretation of what was said. The very next thing you want to do is get on
the same level of understanding with them.&lt;/p>
&lt;p>Repeat back what you heard in your own words. Listen to how they respond, and
ask for clarification wherever there might be a misalignment in your
understanding. These clarifications and levels of understanding help solidify
that you not only heard what the customer wants, but also have a level of
understanding about it.&lt;/p>
&lt;p>&lt;em>Note: This is also a great way to level up your communication when defending a
point or persuading another. Reaching common ground that both sides can agree on
gives you a foundation to step off from.&lt;/em>&lt;/p>
&lt;h2 id="is-one-customer-enough">Is one customer enough?&lt;/h2>
&lt;p>You received feedback from one customer. Sometimes, especially if
they&amp;rsquo;re a cash cow or your primary customer, that could be enough. If you have
some leeway with the deadline on addressing the concern, you&amp;rsquo;ll want to gather
more feedback on similar issues with other customers.&lt;/p>
&lt;p>The more people that are interested in a solution to the same or similar
problem(s) can help you prioritize your work. Not just what is easy or hard to
implement, but also by the impact a change can have on your customer base.&lt;/p>
&lt;h2 id="development-is-underway">Development is underway!&lt;/h2>
&lt;p>As you develop the solution, there&amp;rsquo;s two principles to instill in the process to
help customers receive what they actually need:&lt;/p>
&lt;ol>
&lt;li>Continuous Feedback&lt;/li>
&lt;li>Iterative Development&lt;/li>
&lt;/ol>
&lt;h3 id="continuous-feedback">Continuous Feedback&lt;/h3>
&lt;p>&lt;strong>Always&lt;/strong> include your customers along the journey of development. If they
provided feedback and have a vested interest in the solution being made, then
they likely &lt;em>want&lt;/em> to provide feedback throughout the process.&lt;/p>
&lt;p>I&amp;rsquo;ve grown into using three-pass process for this when the problem is not
trivial.&lt;/p>
&lt;h4 id="1-prototype-around-the-problem">1. Prototype around the problem&lt;/h4>
&lt;p>Typically this is where you get your hands dirty with the problem itself. The
understanding in words is brought to your software. If a solution is already in
mind, you could start planning for that, and while you do, you might hit
different roadblocks and try out different ways of approaching the problem.&lt;/p>
&lt;p>By the end of this prototype, you should have a solid grasp on the problem,
identified solutions that do and don&amp;rsquo;t solve the problem, and be able to start
building the solution.&lt;/p>
&lt;p>Your roadblocks and your conclusions here are two great areas in which
communication with the customer is important. You don&amp;rsquo;t need to share all the
details, but keeping them up-to-date on your findings as well as making sure the
solution you end up with is in line with their needs.&lt;/p>
&lt;h4 id="2-build-your-tracer-bullet2">2. Build your Tracer Bullet&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>&lt;/h4>
&lt;p>At this point in the process, we understand the problem conceptually and
technically, and have identified a solution that should work and meets the
customer&amp;rsquo;s needs.&lt;/p>
&lt;p>Development always then starts with a &amp;ldquo;Tracer Bullet&amp;rdquo;, where we make an MVP of
the feature that hits all layers of the application &amp;ndash; front-end, back-end, etc.
Once this is completed, it allows you to gather customer feedback iteratively
as you flesh out the feature after this initial end-to-end implementation.&lt;/p>
&lt;hr>
&lt;p>At this point, you&amp;rsquo;ve built an MVP for the problem initially discussed! You have
it implemented end-to-end so customers can start using it and providing feedback
as you add additional features and requirements to it.&lt;/p>
&lt;h3 id="iterative-development">Iterative Development&lt;/h3>
&lt;p>When developing products and features, it&amp;rsquo;s important to do it iteratively. As
you likely ascertained during the previous section on feedback, iterative
development lets you take small, conscious steps towards an end-goal.&lt;/p>
&lt;p>Imagine it like walking from one point in a forest to another, without paths or
a map. If you do it iteratively, checking your progress against a compass, the
sun, etc., you&amp;rsquo;ll likely divert a little but reach your goal.&lt;/p>
&lt;p>On the other hand, if you try to beeline to the goal without checking your
progress, you might find yourself at the end of the day way off course, on the
other side of the forest &lt;em>further&lt;/em> from your goal!&lt;/p>
&lt;h4 id="stable-ground">Stable Ground&lt;/h4>
&lt;p>In college I had a professor in my Intro courses (shoutout Prof. Thorton!) who
always talked about reaching &amp;ldquo;stable ground&amp;rdquo;. Each time your program compiles
successfully and passes all tests, you commit your code. It was in each
assignment in bold letters, usually accompanied by a first-step that could be
taken when starting the assignment.&lt;/p>
&lt;p>This advice was extremely effective in outlining a process that all software
developers should use, but also in outlining what an effective &amp;ldquo;step&amp;rdquo; could be
when solving problems in software development.&lt;/p>
&lt;p>With product development, you want the same thing. After launching a new
incremental feature, you should gather feedback and &lt;em>listen&lt;/em>. This practice will
save you a lot of time in the long run when you are building solutions to your
customers&amp;rsquo; problems that actually solve the problem for them. You can use each
iteration as a way to check your progress to your goal.&lt;/p>
&lt;p>Listening to your customers directly is the best type of feedback you can
receive. However, you can also look at metrics &amp;ndash; product adoption, obstacles
that keep users from adopting the new feature, and so on. Use the tools at your
disposal to listen as much as you can to your customers&amp;rsquo; signals!&lt;/p>
&lt;h2 id="product-development-is-a-journey">Product Development is a Journey&lt;/h2>
&lt;p>Product development can be a daunting process, especially when starting a new
product or finding those customers initially that can give you effective
feedback. If you take small steps, develop end-to-end as quickly as possible,
and continuously iterate on that feedback, you&amp;rsquo;re bound to build products that
your customers want and keep coming back to use!&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>_From &lt;a href="https://medium.com/@thx2001r/the-project-cartoon-root-cause-5e82e404ec8a">The &amp;ldquo;Project Cartoon&amp;rdquo; Root Cause&lt;/a>&amp;rsquo;s
article on the same cartoon. (Historical Link: &lt;a href="https://archive.ph/FgxPK">https://archive.ph/FgxPK&lt;/a>)&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>&lt;em>Often these implementations are a &amp;lsquo;quick shot&amp;rsquo; through all layers of an
application, such as connecting a single form&amp;rsquo;s input field to the
back-end, to prove the layers connect as expected.&lt;/em>
(&lt;a href="https://en.wikipedia.org/wiki/Scrum_(software_development)">Wikipedia&lt;/a>)&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Idempotency is Key</title><link>https://chrisprijic.com/idempotency-is-key/</link><pubDate>Fri, 11 Feb 2022 14:00:00 -0800</pubDate><guid>https://chrisprijic.com/idempotency-is-key/</guid><description>&lt;p>&lt;strong>Idempotence&lt;/strong>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> is a property of software that regardless of the number of
times an operation is run, the final results (its output + side effects) are
equivalent to running it only once.&lt;/p>
&lt;p>If you&amp;rsquo;re performing an action at a given time, you could schedule a cron
job and perform it at the desired time. The idempotent way of doing this would
also include checks against &lt;em>if you&amp;rsquo;ve already done an action before.&lt;/em>&lt;/p>
&lt;p>In some software, this might be overkill. In many cases, this property
of software is &lt;strong>critical&lt;/strong> to your success, whether it be software that
performs financial transactions&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup> or sends notifications to users.&lt;/p>
&lt;h2 id="why-do-i-need-to-worry-about-this">Why do I need to worry about this?&lt;/h2>
&lt;p>There are many reasons software might require this property:&lt;/p>
&lt;ul>
&lt;li>your server went down while the code may or may not have performed an
action&lt;/li>
&lt;li>you may need to update the code to be able to execute it again, but without
side effects due to re-running the code&lt;/li>
&lt;li>your data pipeline received data late, and therefore needs to be re-run for
the late time-range&lt;/li>
&lt;/ul>
&lt;p>In any case, it should only take a little extra thought to figure out that
you&amp;rsquo;ve run into any case like these.&lt;/p>
&lt;p>With cloud computing being so common, failure is almost expected of
your hardware&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>. How you handle error scenarios is all based on &lt;em>risk&lt;/em>. You&amp;rsquo;ll
want to apply idempotency to software where you &lt;em>can&amp;rsquo;t&lt;/em> take the risk that your
code will generate additional side effects if re-run.&lt;/p>
&lt;h2 id="example-1-notifications">Example 1: Notifications&lt;/h2>
&lt;p>Email marketing is a common solution to reaching out to the masses about your
product, blog, or feature update. A simple solution could be:&lt;/p>
&lt;ol>
&lt;li>Gather a list of recipients that need to be emailed&lt;/li>
&lt;li>Iterate over the list and email them&lt;/li>
&lt;/ol>
&lt;p>However, there could be issues with running this in production. This process is
not idempotent, and can create a larger issue if it fails in the middle or is
processed multiple times.&lt;/p>
&lt;p>If we want to enable idempotency, you could do the following (changes in bold):&lt;/p>
&lt;ol>
&lt;li>Gather a list of recipients &lt;strong>that haven&amp;rsquo;t received this email&lt;/strong>&lt;/li>
&lt;li>Iterate over the list and email them, &lt;strong>marking them off as you go&lt;/strong>&lt;/li>
&lt;/ol>
&lt;p>Now, if you run the process again, it will only notify those that haven&amp;rsquo;t
already received the email.&lt;/p>
&lt;h2 id="example-2-data-processing">Example 2: Data Processing&lt;/h2>
&lt;p>Data is another common example that is ever-present in software nowadays.
Something as simple as a user login count could easily be implemented like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">UPDATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">users&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">SET&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">login_count&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">login_count&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>As we can see, there are two main issues with this statement:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>It&amp;rsquo;s not idempotent!&lt;/strong> Running it multiple times (software bug, login spam)
will result in a invalid count that shows signs of the number of times it was
run.&lt;/li>
&lt;li>&lt;strong>You can&amp;rsquo;t retrace your steps!&lt;/strong> You only have the final count in the DB;
unless you load a DB backup and re-run your API logs against it, you can&amp;rsquo;t
reconcile the login count of a user if there was an issue.&lt;/li>
&lt;/ol>
&lt;p>Let&amp;rsquo;s try this again, but include a path for idempotency. If we keep a log of
logins that are performed by users, we could utilize this table:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">INSERT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">INTO&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">user_logins&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">user_id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">timestamp&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">VALUES&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">user_id&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">now&lt;/span>&lt;span class="p">())&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">ON&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">CONFLICT&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">DO&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NOTHING&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">ID&lt;/th>
&lt;th style="text-align:left">User ID&lt;/th>
&lt;th style="text-align:left">Timestamp&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">1&lt;/td>
&lt;td style="text-align:left">1&lt;/td>
&lt;td style="text-align:left">2022-02-09 00:02:23&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">2&lt;/td>
&lt;td style="text-align:left">1&lt;/td>
&lt;td style="text-align:left">2022-02-09 00:02:45&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">3&lt;/td>
&lt;td style="text-align:left">2&lt;/td>
&lt;td style="text-align:left">2022-02-09 00:02:46&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">4&lt;/td>
&lt;td style="text-align:left">2&lt;/td>
&lt;td style="text-align:left">2022-02-09 00:03:01&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">5&lt;/td>
&lt;td style="text-align:left">2&lt;/td>
&lt;td style="text-align:left">2022-02-09 00:04:26&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Since we assign an ID to each login request, we can dedup the results by the ID
column. You can then perform a daily aggregation:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">INSERT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">INTO&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">daily_user_counts&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">timestamp&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="nb">date&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">user_id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">COUNT&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">as&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">count&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">user_logins&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">timestamp&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="nb">date&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nb">date&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">ON&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">CONFLICT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">user_id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">date&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">UPDATE&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">SET&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">count&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">excluded&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">count&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If this is ran one time or twenty times for the date &lt;code>'2022-02-09'&lt;/code>, you&amp;rsquo;ll
always get the following result:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">User ID&lt;/th>
&lt;th style="text-align:left">Count&lt;/th>
&lt;th style="text-align:left">Date&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">1&lt;/td>
&lt;td style="text-align:left">2&lt;/td>
&lt;td style="text-align:left">2022-02-09&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">2&lt;/td>
&lt;td style="text-align:left">3&lt;/td>
&lt;td style="text-align:left">2022-02-09&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>This way, the &lt;em>entire data process&lt;/em>&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup> is idempotent &amp;ndash; the final results don&amp;rsquo;t
show any sign of the number of times it was run, and can safely be performed
multiple times and deliver the same, accurate results.&lt;/p>
&lt;h2 id="what-does-this-mean-for-the-bottom-line">What does this mean for &amp;ldquo;the bottom line&amp;rdquo;?&lt;/h2>
&lt;blockquote>
&lt;p>Ever heard a business professional complain that your software team spends too
much time testing?&lt;/p>
&lt;/blockquote>
&lt;p>I find it important to be able to talk to non-technical colleagues about the
importance of technical concepts. I find idempotency to bring a couple key
factors to software that a business benefits from.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>The lack of custom processes when something goes wrong.&lt;/strong> If a data
pipeline fails, you can fix the problem then run things back up-to-speed. You
don&amp;rsquo;t need to isolate data and come up with a custom patch to fix the time
range you need to address. This adds up to faster turnaround times and
overall safer processes.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Good software surprises your users and builds trust.&lt;/strong> When software &lt;em>Just
Works&lt;/em>&lt;sup>TM&lt;/sup>, then you could end up with software that surprises your
users. It&amp;rsquo;s like finding your hard work saved on a computer that crashed &amp;ndash;
that additional care to keep track of yout state and make processes
re-runnable makes for happier users and better trust in your software.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="idempotency-is-key">Idempotency is Key&lt;/h2>
&lt;p>This was just a brief introduction to the caveats of idempotency. It helps you
build reliable software processes that can handle more of the unknowns that
critical production systems can throw at you. When you have a critical process,
idempotency can be one of the best tools to create a more resilient software
solution.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Idempotence">Wikipedia, Idempotence&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>A great example is Stripe&amp;rsquo;s
&lt;a href="https://stripe.com/blog/idempotency">Idempotency Key&lt;/a>&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3">
&lt;p>&lt;em>When you think in terms of the blast radius, the question of failure is
no longer a question of if but a matter of when.&lt;/em>
&lt;a href="https://aws.amazon.com/getting-started/fundamentals-core-concepts/">AWS Fundamentals&lt;/a>&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4">
&lt;p>The process is idempotent, but the transform is &lt;em>reproducable&lt;/em>.
&lt;a href="https://medium.com/ssense-tech/lets-get-idempotence-right-59f227178bb8">Let’s Get ‘Idempotence’ Right&lt;/a>&amp;#160;&lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Personal Goals for 2022</title><link>https://chrisprijic.com/personal-goals-for-2022/</link><pubDate>Fri, 14 Jan 2022 12:38:42 -0800</pubDate><guid>https://chrisprijic.com/personal-goals-for-2022/</guid><description>&lt;p>As I step into 2022, I want to write down my goals for this year. This list is
by no means all-encompassing but it covers many of the highlights I want to hit
this year.&lt;/p>
&lt;p>I’ve found writing down and sharing my goals to be a great motivator, so this
post will hopefully help me be more accountable to my goals this year.&lt;/p>
&lt;h2 id="professional">Professional&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>The Rust programming language&lt;/strong>&lt;/p>
&lt;p>&lt;a href="https://www.rust-lang.org/">Rust&lt;/a> is showing up alot on projects that
interest me, and the language&amp;rsquo;s design also draws me in. I&amp;rsquo;ve found
&lt;a href="https://twitter.com/nodirt_/status/1478419198174896130">this experience&lt;/a> of a
Go developer&amp;rsquo;s journey exploring Rust very insightful as well.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Real-Time dataata-driven ecosystem&lt;/strong>&lt;/p>
&lt;p>At Orbee we&amp;rsquo;ve started using &lt;a href="https://pulsar.apache.org/">Pulsar&lt;/a> to support
our real-time data streams and events in late 2021. Moving forward, checking
out awesome projects like &lt;a href="https://flink.apache.org/">Flink&lt;/a> and
&lt;a href="https://delta.io/">Delta Lake&lt;/a> to build an ecosystem on top of Pulsar is on
our list of goals in 2022.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="personal">Personal&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Write an article once a month&lt;/strong>&lt;/p>
&lt;p>To continue to develop my professional writing, I plan on getting myself to
write on a regular basis. This is my first post to kick off this trend.&lt;/p>
&lt;p>I have some interesting topics in the areas I&amp;rsquo;ve worked in (data, analytics,
marketing and game development) that I want to discuss on this site.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Read a new book once a month&lt;/strong>&lt;/p>
&lt;p>To continue to make sure I&amp;rsquo;m growing and developing personally and
professionally, I also want to maintain a steady reading habit.&lt;/p>
&lt;p>I&amp;rsquo;m currently reading
&lt;a href="https://www.oreilly.com/library/view/modern-software-engineering/9780137314942/">Modern Software Engineering&lt;/a>
by David Farley to concretize my understanding on how to communicate about
good software development practices.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Exercise regularly&lt;/strong>&lt;/p>
&lt;p>I make sure to get my steps in every day and get my heart rate up &lt;em>most&lt;/em> days,
but I want to do better. Working on a more holistic solution so I maintain a
healthy lifestyle is my goal in 2022.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="projects">Projects&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Modified map/reduce project in Rust (Distributed, Cloud-Native)&lt;/strong>&lt;/p>
&lt;p>I&amp;rsquo;ve seen a trend of projects that iterate off of a &amp;ldquo;modified&amp;rdquo; Map/Reduce
software architecture that I find interesting as a solution space; I plan on
exploring this space with a project of my own.&lt;/p>
&lt;p>A great example of this is &lt;a href="https://quickwit.io/">Quickwit&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Create a game in C++&lt;/strong>&lt;/p>
&lt;p>I&amp;rsquo;ve dabbled in game development since College (software rendering,
Minecraft clone) but never followed through on any of these projects. I&amp;rsquo;ve
also been told finishing that first game is the hardest part &amp;ndash; so I plan on
starting small and completing a game this year.&lt;/p>
&lt;p>&lt;a href="https://www.ponggame.org/">Pong&lt;/a>,
&lt;a href="https://en.wikipedia.org/wiki/Snake_(video_game_genre)">Snake&lt;/a>, and
&lt;a href="https://en.wikipedia.org/wiki/Space_Invaders">Space Invaders&lt;/a> are all great
examples of games that can be pulled off in a reasonable amount of time.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Build a personal website&lt;/strong> ✅&lt;/p>
&lt;p>I purchased this domain a couple years ago. Since then, I haven&amp;rsquo;t used it.
This year, I&amp;rsquo;ve decided to utilize it as a way to accomplish my goals and
share more of my skills and experiences publicly.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>I&amp;rsquo;m excited to see how 2022 goes as I work towards these goals! What are you
planning to accomplish in 2022?&lt;/p></description></item></channel></rss>